package main

import (
	"flag"
	"fmt"
	"github.com/gmm1900/deptrace/service"
	"log"
)

func main() {
	var pathToFile, dependencyModule *string
	pathToFile = flag.String("f", "", "required: path to the file generated by command go mod graph, e.g., /path/to/file")
	dependencyModule = flag.String("m", "", "required: module (with or without version) that dependency path to be searched, e.g., github.com/go-kit/kit@v0.10.0")
	flag.Parse()

	if pathToFile == nil || *pathToFile == "" || dependencyModule == nil || *dependencyModule == "" {
		flag.Usage()
		return
	}

	//dependencyModule := "golang.org/x/crypto"
	//pathToFile := "/Users/pguz092c/go/src/code.in.spdigital.sg/guozaiyi/exp/deptrace/reef_go_mod_graph"

	inputs, err := service.ParseFile(*pathToFile)
	if err != nil {
		log.Fatal(err)
	}
	log.Println("file parsed")

	tree := service.Analyze(inputs)
	log.Println("tree analyzed")


	dependencyPaths := tree.SearchPath(*dependencyModule)
	log.Printf("found %v dependency paths to %s", len(dependencyPaths), *dependencyModule)
	for i := range dependencyPaths {
		pathLength := len(dependencyPaths[i])
		fmt.Println()
		fmt.Println("path", i, "from root to", dependencyPaths[i][pathLength-1], ":")
		dependencyPaths[i].Print()
	}
}